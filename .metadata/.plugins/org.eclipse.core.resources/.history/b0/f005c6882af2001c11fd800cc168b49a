package com.wipro.velocity.controller;

import java.util.List;

import com.wipro.velocity.exception.ResourceNotFoundException;
import com.wipro.velocity.model.Product;
import com.wipro.velocity.repository.ProductRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(value="/api")
public class ProductController {
	
	@Autowired
	private ProductRepository prepo;
	
	
	
	
	// @RequestBody annotation automatically deserializes the JSON into a Java type
	
	 // POST- http://localhost:9095/ims/api/products
	@PostMapping("/products")
	public Product saveProduct(@Validated @RequestBody Product product)
	{
		return prepo.save(product); //invokes save() method of MongoRepository
	}
	
	// GET - http://localhost:9095/ims/api/products
	@GetMapping("/products")
	public List<Product> getAllProducts()
	{
		return prepo.findAll(); //invokes findAll() method of MongoRepository
		
	}
	
	//ResponseEntity represents the whole HTTP response: status code, headers, and body.
    // As a result, we can use it to fully configure the HTTP response
	
	// PUT - http://localhost:9095/ims/api/products/101
	
	@PutMapping("/products/{id}")
	public ResponseEntity<Product> updateProduct(@PathVariable(value="id") String pId,
			@Validated @RequestBody Product p) throws ResourceNotFoundException
	{
		Product product=prepo.findById(pId).
				orElseThrow(() -> new ResourceNotFoundException
				("Product Not found for this Id: "+pId));
				
				product.setName(p.getName());
				product.setBrand(p.getBrand());
				product.setMadein(p.getMadein());
				product.setPrice(p.getPrice());
				
                final Product updatedProduct=prepo.save(product);
    			
    			return ResponseEntity.ok(updatedProduct);
	}
 	

}